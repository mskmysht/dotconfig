[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-source-rg'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
  call ddu#custom#patch_global({
  \   'ui': 'ff',
  \   'sources': [
  \     {
  \       'name': 'file_rec',
  \       'params': {
  \         'ignoredDirectories': ['.git', 'node_modules', 'vendor', '.next']
  \       }
  \     }
  \   ],
  \   'sourceOptions': {
  \     '_': {
  \       'matchers': ['matcher_substring'],
  \     },
  \   },
  \   'filterParams': {
  \     'matcher_substring': {
  \       'highlightMatched': 'Title',
  \     },
  \   },
  \   'kindOptions': {
  \     'file': {
  \       'defaultAction': 'open',
  \     },
  \   },
  \   'uiParams': {
  \     'ff': {
  \       'startFilter': v:true,
  \       'prompt': '> ',
  \       'split': 'floating',
  \     }
  \   },
  \ })

  autocmd FileType ddu-ff call s:ddu_my_settings()
  function! s:ddu_my_settings() abort
    nnoremap <buffer><silent> <CR>
      \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

    nnoremap <buffer><silent> <Space>
      \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>

    nnoremap <buffer><silent> a
      \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

    nnoremap <buffer><silent> p
      \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

    nnoremap <buffer><silent> <Esc>
      \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  endfunction

  autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
  function! s:ddu_filter_my_settings() abort
    inoremap <buffer><silent> <CR>
      \ <Esc><Cmd>close<CR>

    inoremap <buffer><silent> <Esc>
      \ <Esc><Cmd>close<CR>

    nnoremap <buffer><silent> <CR>
      \ <Cmd>close<CR>

    nnoremap <buffer><silent> <Esc>
      \ <Cmd>close<CR>
  endfunction

  nmap <silent> ;f <Cmd>call ddu#start({})<CR>
  nmap <silent> ;g <Cmd>call ddu#start({
  \   'name': 'grep',
  \   'sources':[
  \     {'name': 'rg', 'params': {'input': expand('<cword>')}}
  \   ],
  \ })<CR>
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# scheme
[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

# syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# visual
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \}
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

# operation
[[plugins]]
repo = 'tyru/caw.vim'
on_i = 1
hook_add = '''
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)
  nmap <Leader>, <Plug>(caw:zeropos:toggle)
  vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  let mapleader = "\<Space>"
  call submode#enter_with('bufmove', 'n', '', '<Leader>>', '<C-w>>')
  call submode#enter_with('bufmove', 'n', '', '<Leader><', '<C-w><')
  call submode#enter_with('bufmove', 'n', '', '<Leader>+', '<C-w>+')
  call submode#enter_with('bufmove', 'n', '', '<Leader>-', '<C-w>-')
  call submode#map('bufmove', 'n', '', '>', '<C-w>>')
  call submode#map('bufmove', 'n', '', '<', '<C-w><')
  call submode#map('bufmove', 'n', '', '+', '<C-w>+')
  call submode#map('bufmove', 'n', '', '-', '<C-w>-')

  call submode#enter_with('indent', 'n', '', '>', '>>')
  call submode#enter_with('indent', 'n', '', '<', '<<')
  call submode#map('indent', 'n', '', '>', '>>')
  call submode#map('indent', 'n', '', '<', '<<')

  call submode#enter_with('v-indent', 'v', '', '>', '>gv')
  call submode#enter_with('v-indent', 'v', '', '<', '<gv')
  call submode#map('v-indent', 'v', '', '>', '>gv')
  call submode#map('v-indent', 'v', '', '<', '<gv')
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  " <Leader>f{char} to move to {char}
  map F <Plug>(easymotion-bd-f)
  nmap F <Plug>(easymotion-overwin-f)

  " s{char}{char} to move to {char}{char}
  nmap <Leader>f <Plug>(easymotion-overwin-f2)
  vmap <Leader>f <Plug>(easymotion-bd-f2)

  " Move to line
  map <Leader>L <Plug>(easymotion-bd-jk)
  nmap <Leader>L <Plug>(easymotion-overwin-line)
  
  " Move to word
  map  <Leader>w <Plug>(easymotion-bd-w)
  nmap <Leader>w <Plug>(easymotion-overwin-w)
  if has('conceal')
    setlocal conceallevel=0
  endif
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  "nmap <silent> <Leader>r <Plug>(quickrun)
  "noremap <Leader>r :<C-U>QuickRun<CR>
  "if !exists('g:quickrun_config')
  "  let g:quickrun_config={}
  "endif
  let g:quickrun_config = {
        \  '_': {
        \    'outputter/buffer/split': ':botright 8sp'
        \  },
        \  'tex' : {
        \    'command': 'ptex2pdf',
        \    'cmdopt': '-u -l "-synctex=1 -file-line-error -shell-escape"',
        \    'exec': ['%c %o %s', 'open %s:r.pdf']
        \  }
        \}
'''

[[plugins]]
repo = 'tyru/eskk.vim'
hook_add = '''
  noremap <C-j> <C-^>
  imap <C-^> <Plug>(eskk:enable)
  let g:eskk#enable_completion = 1
  let g:eskk#directory = "~/.config/eskk"
  let g:eskk#dictionary = { 'path': "~/.cache/skk/skk-jisyo", 'sorted': 0, 'encoding': 'utf-8', }
  let g:eskk#large_dictionary = { 'path': "~/.config/eskk/SKK-JISYO.L", 'sorted': 1, 'encoding': 'euc-jp', }
  " let g:eskk#large_dictionary = { 'path': "~/.config/eskk/SKK-JISYO.ML", 'sorted': 1, 'encoding': 'euc-jp', }
'''

